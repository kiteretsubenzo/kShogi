#ifndef DEFINITIONS_H
#define DEFINITIONS_H

typedef unsigned char uchar;
typedef unsigned char PAWN;

static const int BOARD_WIDTH = 9;
static const int BOARD_HEIGHT = 9;

static const PAWN PAWN_HU = 0;
static const PAWN PAWN_KYOH = 1;
static const PAWN PAWN_KEI = 2;
static const PAWN PAWN_GIN = 3;
static const PAWN PAWN_KAKU = 4;
static const PAWN PAWN_HI = 5;
static const PAWN PAWN_KIN = 6;
static const PAWN PAWN_GYOKU = 7;
static const PAWN PAWN_HUN = 8;
static const PAWN PAWN_KYOHN = 9;
static const PAWN PAWN_KEIN = 10;
static const PAWN PAWN_GINN = 11;
static const PAWN PAWN_UMA = 12;
static const PAWN PAWN_RYU = 13;
static const PAWN PAWN_MAX = 14;
static const PAWN PAWN_NONE = PAWN_MAX;
static const PAWN CAPTURE_MAX = PAWN_GYOKU;

typedef unsigned char PLAYER;

static const PLAYER PLAYER_FIRST = 0;
static const PLAYER PLAYER_SECOND = 1;
static const PLAYER PLAYER_NONE = 2;
static const PLAYER PLAYER_WALL = 3;

static const PLAYER PLAYER_MAX = 2;

static const char PAWN_CHAR[PAWN_MAX + 1] =
{
	'h', 'y', 'e', 'g', 'u', 'r', 'k', 'o', 'H', 'Y', 'E', 'G', 'U', 'R', 'n'
};

static const std::string PAWN_KANJI[PAWN_MAX] =
{
	"•à", "ˆÇ", "Œj", "‹â", "Šp", "”ò", "‹à", "‹Ê", "‚Æ", "—ß", "‰î", "‘S", "”n", "—´",
};

static const PAWN charToPawn[256] =
{
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_KEIN,	PAWN_NONE,	PAWN_GINN,	PAWN_HUN,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_RYU,	PAWN_NONE,	PAWN_NONE,	PAWN_UMA,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_KYOHN,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_KEI,	PAWN_NONE,	PAWN_GIN,	PAWN_HU,	PAWN_NONE,	PAWN_NONE,	PAWN_KIN,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_GYOKU,
	PAWN_NONE,	PAWN_NONE,	PAWN_HI,	PAWN_NONE,	PAWN_NONE,	PAWN_KAKU,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_KYOH,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE
};

static const std::string numberToZenkaku[9] =
{
	"‚X", "‚W", "‚V", "‚U", "‚T", "‚S", "‚R", "‚Q", "‚P"
};

static const std::string numberToKanji[9] =
{
	"ˆê", "“ñ", "ŽO", "Žl", "ŒÜ", "˜Z", "Žµ", "”ª", "‹ã"
};

#endif // DEFINITIONS_H