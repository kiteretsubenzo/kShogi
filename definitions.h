#ifndef DEFINITIONS_H
#define DEFINITIONS_H

#define BOARD_WIDTH 9
#define BOARD_HEIGHT 9

#define PRIORITY_NONE		0
#define PRIORITY_LIST		1
#define PRIORITY_MULTISET	2

#define USE_PRIORITY PRIORITY_MULTISET

typedef unsigned char uchar;
typedef unsigned char PAWN;

#define PAWN_HU		0
#define PAWN_KYOH	1
#define PAWN_KEI	2
#define PAWN_GIN	3
#define PAWN_KAKU	4
#define PAWN_HI		5
#define PAWN_KIN	6
#define PAWN_GYOKU	7
#define PAWN_HUN	8
#define PAWN_KYOHN	9
#define PAWN_KEIN	10
#define PAWN_GINN	11
#define PAWN_UMA	12
#define PAWN_RYU	13
#define PAWN_MAX	14
#define PAWN_NONE	PAWN_MAX
#define CAPTURE_MAX	PAWN_GYOKU

static const char PAWN_CHAR[PAWN_MAX] =
{
	'h', 'y', 'e', 'g', 'u', 'r', 'k', 'o', 'H', 'Y', 'E', 'G', 'U', 'R'
};

static const std::string PAWN_KANJI[PAWN_MAX] =
{
	"歩", "杏", "桂", "銀", "角", "飛", "金", "玉", "と", "令", "介", "全", "馬", "龍",
};

static const PAWN charToPawn[256] =
{
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_KEIN,	PAWN_NONE,	PAWN_GINN,	PAWN_HUN,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_RYU,	PAWN_NONE,	PAWN_NONE,	PAWN_UMA,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_KYOHN,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_KEI,	PAWN_NONE,	PAWN_GIN,	PAWN_HU,	PAWN_NONE,	PAWN_NONE,	PAWN_KIN,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_GYOKU,
	PAWN_NONE,	PAWN_NONE,	PAWN_HI,	PAWN_NONE,	PAWN_NONE,	PAWN_KAKU,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_KYOH,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,
	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE,	PAWN_NONE
};

// 'h', 'y', 'e', 'g', 'u', 'r', 'k', 'o', 'H', 'Y', 'E', 'G', 'U', 'R'
// h	104	0x68
// y	121	0x79
// e	101	0x65
// g	103	0x67
// u	117	0x75
// r	114	0x72
// k	107	0x6b
// o	111	0x6f
// H	72	0x48
// Y	89	0x59
// E	69	0x45
// G	71	0x47
// U	85	0x55
// R	82	0x52

/*
@	64	0x40
A	65	0x41
B	66	0x42
C	67	0x43
D	68	0x44
E	69	0x45
F	70	0x46
G	71	0x47
H	72	0x48
I	73	0x49
J	74	0x4a
K	75	0x4b
L	76	0x4c
M	77	0x4d
N	78	0x4e
O	79	0x4f
P	80	0x50
Q	81	0x51
R	82	0x52
S	83	0x53
T	84	0x54
U	85	0x55
V	86	0x56
W	87	0x57
X	88	0x58
Y	89	0x59
Z	90	0x5a
[	91	0x5b
\¥	92	0x5c
]	93	0x5d
^	94	0x5e
_	95	0x5f
`	96	0x60
a	97	0x61
b	98	0x62
c	99	0x63
d	100	0x64
e	101	0x65
f	102	0x66
g	103	0x67
h	104	0x68
i	105	0x69
j	106	0x6a
k	107	0x6b
l	108	0x6c
m	109	0x6d
n	110	0x6e
o	111	0x6f
p	112	0x70
q	113	0x71
r	114	0x72
s	115	0x73
t	116	0x74
u	117	0x75
v	118	0x76
w	119	0x77
x	120	0x78
y	121	0x79
z	122	0x7a
{	123	0x7b
**	124	0x7c
}	125	0x7d
~	126	0x7e
DEL	127	0x7f
*/

#define Upgrade(type)	(type |= 0x08)
#define Downgrade(type)	(type &= 0x07)
#define IsUpgrade(type)	((type & 0x08) != 0)
#define IsGyokuKinUpgrade(type) (PAWN_KIN <= type)

static const int SCORE_NONE = std::numeric_limits<int>::max() - 1;
static const int SCORE_WIN = 99999;
static const int MOVES_MAX = (BOARD_WIDTH + BOARD_HEIGHT - 2) * BOARD_WIDTH * BOARD_HEIGHT * 2 + (CAPTURE_MAX - 1) * BOARD_WIDTH * BOARD_HEIGHT;

std::vector<std::string> split(std::string str, char c);
std::unordered_map<std::string, std::string> fromJson(std::string str);

#endif // DEFINITIONS_H